#!/bin/bash

set -e

##########################################################################################
# Step 1: Read text from stdin
INPUT=$(cat)

# Check if input is empty
if [ -z "$INPUT" ]; then
    echo "Error: No text provided. Please provide text via stdin."
    exit 1
fi

##########################################################################################
# Step 2: Use fzf to select an Obsidian file
OBSIDIAN_VAULT="$HOME/Documents/Obsidian-Synced"

# Check if Obsidian vault exists
if [ ! -d "$OBSIDIAN_VAULT" ]; then
    echo "Error: Obsidian vault not found at $OBSIDIAN_VAULT"
    exit 1
fi

# Pre-defined files to include (format: filepath|action|display_name)
PREDEFINED_ENTRIES="$HOME/Documents/Obsidian-Synced/4 - Inbox/Inbox.md|prepend|ðŸ“¥ Inbox (Quick Capture)"

# Find all markdown files in the vault
VAULT_FILES=$(find "$OBSIDIAN_VAULT" -type f -name "*.md")

# Format vault files with action (format: filepath|action|display_name)
# Extract just the filepaths from predefined entries for deduplication
PREDEFINED_PATHS=$(echo "$PREDEFINED_ENTRIES" | cut -d'|' -f1)
# Get unique vault files that aren't in predefined list
UNIQUE_VAULT_FILES=$(echo "$VAULT_FILES" | grep -Fxv -f <(echo "$PREDEFINED_PATHS") || true)
# Format vault files with "select_heading" action and use filename as display
FORMATTED_VAULT_FILES=$(echo "$UNIQUE_VAULT_FILES" | awk -F'/' '{print $0"|select_heading|"$NF}')

# Combine predefined entries with formatted vault files
ALL_ENTRIES=$(echo -e "$PREDEFINED_ENTRIES\n$FORMATTED_VAULT_FILES" | grep -v '^$')

# Check if any files were found
if [ -z "$ALL_ENTRIES" ]; then
    echo "Error: No markdown files found"
    exit 1
fi

# Use fzf to select a file (showing only the display name)
SELECTED_FILE=$(echo "$ALL_ENTRIES" | fzf --delimiter='|' --with-nth=3 --height=40% --layout=reverse --border --prompt="Select Obsidian file: ")

# Check if a file was selected
if [ -z "$SELECTED_FILE" ]; then
    echo "No file selected. Exiting."
    exit 1
fi

echo "Selected: $SELECTED_FILE"

# Parse the selected entry
FILE_PATH=$(echo "$SELECTED_FILE" | cut -d'|' -f1)
ACTION=$(echo "$SELECTED_FILE" | cut -d'|' -f2)
DISPLAY_NAME=$(echo "$SELECTED_FILE" | cut -d'|' -f3)

echo "File: $FILE_PATH"
echo "Action: $ACTION"

# If action is "prepend", prepend to the beginning without asking for heading
if [ "$ACTION" = "prepend" ]; then
    echo "Prepending to file: $FILE_PATH"
    
    # Create a temporary file for prepending
    PREPEND_TMP_FILE=$(mktemp)
    
    # Write the new input first, then append the original file content
    echo "$INPUT" > "$PREPEND_TMP_FILE"
    echo "" >> "$PREPEND_TMP_FILE" # Add a blank line after the prepended text
    cat "$FILE_PATH" >> "$PREPEND_TMP_FILE"
    
    # Replace the original file
    mv "$PREPEND_TMP_FILE" "$FILE_PATH"
    
    echo "Text successfully prepended to $FILE_PATH"
    exit 0
fi

##########################################################################################
# Step 3: Use fzf to select a heading from the file (only for select_heading action)

# Extract headings (lines starting with #) from the selected file
echo "Extracting headings from $FILE_PATH..."

# First create a temporary file with the headings
TMP_HEADINGS=$(mktemp)
# Add "Start of File" option as the first choice, with line number 0
echo "0:--- Prepend to Start of File ---" > "$TMP_HEADINGS"
# Append actual headings from the file, if any
grep -n "^#" "$FILE_PATH" >> "$TMP_HEADINGS" || true

# The original 'if [ ! -s "$TMP_HEADINGS" ]' block (checking for no headings)
# and its associated comment are removed. If no actual headings are found, 
# fzf will still show the "--- Prepend to Start of File ---" option. 
# Selecting it will result in HEADING_LINE_NUMBER=0, which is handled in Step 4.

# Display found headings for debugging
echo "Found headings:"
cat "$TMP_HEADINGS"

# Use the headings directly with fzf
echo "Select a heading (use arrow keys and press Enter):"

# Use fzf to select a heading directly from the file
SELECTED_HEADING=$(cat "$TMP_HEADINGS" | fzf --height=40% --layout=reverse --border --prompt="Select heading: ")
rm "$TMP_HEADINGS"

# Check if a heading was selected
if [ -z "$SELECTED_HEADING" ]; then
    echo "No heading selected. Exiting."
    exit 1
fi

# Extract the line number cleanly
HEADING_LINE_NUMBER=$(echo "$SELECTED_HEADING" | awk -F":" '{print $1}')

# Extract heading text (everything after the first colon)
HEADING_TEXT=$(echo "$SELECTED_HEADING" | awk -F":" '{$1=""; print $0}' | sed 's/^[ \t]*//')

echo "Selected heading: $HEADING_TEXT (line $HEADING_LINE_NUMBER)"

##########################################################################################
# Step 4: Implement text insertion under the selected heading

# Handle "Prepend to Start of File" option if HEADING_LINE_NUMBER is 0
if [ "$HEADING_LINE_NUMBER" -eq 0 ]; then
    echo "Prepending text to the beginning of the file (selected '--- Prepend to Start of File ---')."
    
    # Create a temporary file for prepending
    PREPEND_TMP_FILE=$(mktemp)

    # Write the new input first, then append the original file content
    echo "$INPUT" > "$PREPEND_TMP_FILE"
    echo "" >> "$PREPEND_TMP_FILE" # Add a blank line after the prepended text
    cat "$FILE_PATH" >> "$PREPEND_TMP_FILE"

    # Replace the original file
    mv "$PREPEND_TMP_FILE" "$FILE_PATH"

    echo "Text successfully prepended to $FILE_PATH"
    exit 0 # Successfully prepended, so exit normally
fi

# Original Step 4 logic continues here if HEADING_LINE_NUMBER is not 0

TOTAL_LINES_IN_FILE=$(wc -l < "$FILE_PATH" | tr -d ' ') # For boundary checks

# Determine the line number after which the new text should be prepended.
# This will be the heading line itself, or the line of dashes if it exists immediately after the heading.
PREPEND_AFTER_LINE_NUM=$HEADING_LINE_NUMBER
TARGET_DASHES_LINE_NUM=$((HEADING_LINE_NUMBER + 1))

echo "Debug: Checking for dashes line at $TARGET_DASHES_LINE_NUM (Heading on $HEADING_LINE_NUMBER, Total lines: $TOTAL_LINES_IN_FILE)."

# Check for '---' line
if [ "$TARGET_DASHES_LINE_NUM" -le "$TOTAL_LINES_IN_FILE" ]; then
    LINE_CONTENT_AFTER_HEADING=$(sed -n "${TARGET_DASHES_LINE_NUM}p" "$FILE_PATH")
    TRIMMED_LINE_CONTENT=$(echo "$LINE_CONTENT_AFTER_HEADING" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    if [[ "$TRIMMED_LINE_CONTENT" =~ ^-{3,}$ ]]; then
        # Found a dashes line, so we will prepend new text after this dashes line
        PREPEND_AFTER_LINE_NUM=$TARGET_DASHES_LINE_NUM
        echo "Info: Dashes line '---' found at line $TARGET_DASHES_LINE_NUM. Text will be inserted after it."
    else
        echo "Info: No dashes line found at line $TARGET_DASHES_LINE_NUM. Text will be inserted after heading line $HEADING_LINE_NUMBER."
    fi
else
    echo "Info: Heading is at or near end of file (or file too short for dashes line). Text will be inserted after heading line $HEADING_LINE_NUMBER."
fi

echo "Info: New text will be inserted after line $PREPEND_AFTER_LINE_NUM of the original file."

# Create a temporary file for the modified content
TMP_FILE=$(mktemp)

# 1. Copy lines from the beginning of the file up to and including PREPEND_AFTER_LINE_NUM
if [ "$PREPEND_AFTER_LINE_NUM" -gt 0 ]; then
    head -n "$PREPEND_AFTER_LINE_NUM" "$FILE_PATH" > "$TMP_FILE"
else
    # This case (PREPEND_AFTER_LINE_NUM=0) should not be reached if HEADING_LINE_NUMBER >= 1.
    : > "$TMP_FILE" # Creates an empty TMP_FILE if it were to happen.
fi

# 2. Add a blank line for separation, then the input text 
# This maintains a similar behavior to the original script's insertion style.
echo "" >> "$TMP_FILE"
echo "$INPUT" >> "$TMP_FILE"

# 3. Append the rest of the original file, starting from the line *after* PREPEND_AFTER_LINE_NUM
LINE_TO_START_TAIL=$((PREPEND_AFTER_LINE_NUM + 1))
if [ "$LINE_TO_START_TAIL" -le "$TOTAL_LINES_IN_FILE" ]; then
    tail -n "+${LINE_TO_START_TAIL}" "$FILE_PATH" >> "$TMP_FILE"
fi

# Replace the original file with the modified content
cp "$TMP_FILE" "$FILE_PATH"
rm "$TMP_FILE"

echo "Successfully inserted text under heading '$HEADING_TEXT' in $FILE_PATH"
